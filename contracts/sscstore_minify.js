actions.createSSC=async()=>{await api.db.createTable("params");const params={priceHBD:"1000000",priceHive:"'${CONSTANTS.SSC_STORE_PRICE}$'",quantity:"'${CONSTANTS.SSC_STORE_QTY}$'",disabled:!1};await api.db.insert("params",params)},actions.updateParams=async payload=>{if(api.sender!==api.owner)return;const{priceHBD:priceHBD,priceHive:priceHive,quantity:quantity,disabled:disabled}=payload,params=await api.db.findOne("params",{});params.priceHBD=priceHBD,params.priceHive=priceHive,params.quantity=quantity,params.disabled=disabled,await api.db.update("params",params)},actions.buy=async payload=>{const{recipient:recipient,amountHIVEHBD:amountHIVEHBD,isSignedWithActiveKey:isSignedWithActiveKey}=payload;if(recipient===api.owner&&api.assert(recipient&&amountHIVEHBD&&isSignedWithActiveKey,"invalid params")){const params=await api.db.findOne("params",{});if(params.disabled)return;const res=amountHIVEHBD.split(" "),amount=res[0],unit=res[1];let quantity=0,quantityToSend=0;api.BigNumber.set({DECIMAL_PLACES:3}),"HIVE"===unit&&(quantity=api.BigNumber(amount).dividedBy(params.priceHive)),quantityToSend=api.BigNumber(quantity).multipliedBy(params.quantity).toFixed("${CONSTANTS.UTILITY_TOKEN_PRECISION}$"),quantityToSend>0&&await api.executeSmartContractAsOwner("tokens","transfer",{symbol:"'${CONSTANTS.UTILITY_TOKEN_SYMBOL}$'",quantity:quantityToSend,to:api.sender})}};